{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genres","Movie","_ref","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_RenderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","incognito","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA2EA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA8B,IAATC,EAASD,EAATC,OACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,iBAAiBG,EAAjC,KAUOC,MAvEf,SAAAC,GAAkD,IAAlCZ,EAAkCY,EAAlCZ,OAAQM,EAA0BM,EAA1BN,MAAOI,EAAmBE,EAAnBF,OAAQG,EAAWD,EAAXC,SACnC,OACIX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVG,EAAOI,IAAI,SAACJ,EAAQK,GAAT,OAAmBb,EAAAC,EAAAC,cAACI,EAAD,CAAYE,OAAQA,EAAQM,IAAKD,OAEpEb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACIe,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC+DjBC,6MA7EbC,MAAQ,KAmCRC,cAAgB,WASd,OAReC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACnC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,CACPvB,MAAOsB,EAAME,cACb9B,OAAQ4B,EAAMG,mBACdf,IAAKY,EAAMI,GACXtB,OAAQkB,EAAMlB,OACdG,SAAUe,EAAMf,gBAKpBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAhC,EAAAiC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACZf,WAHS,wBAAAU,EAAAM,SAAAT,QAObM,SAAW,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAS,OAAIA,EAAUC,SAC5BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA3B1BG,KAAKpB,8CA8BE,IACAN,EAAU0B,KAAK7B,MAAfG,OACP,OACEzB,EAAAC,EAAAC,cAAA,OAAKG,UAAWoB,EAAQ,MAAO,eAO5BA,EAAS0B,KAAK5B,gBAAkB,kBAzEvB6B,aCXEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.ec1394d8.chunk.js","sourcesContent":["import React/*, { Component }*/ from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\n// class Movie extends Component {\r\n    \r\n//     static propTypes= {\r\n//         title: PropTypes.string.isRequired,\r\n//         poster: PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render() {\r\n//         return( \r\n//             <div>\r\n//                 <MoviePoster poster={this.props.poster}/>\r\n//                 <h1>{this.props.title}</h1>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\nfunction Movie({poster, title, genres, synopsis}) {\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genres, index) => <MovieGenre genres={genres} key={index}/>)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'/>\r\n                    {/* <MovieSynopsis synopsis={synopsis}/> */}\r\n                </div>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genres: PropTypes.string.isRequired\r\n}\r\n// class MoviePoster extends Component {\r\n//     static propTypes= {\r\n//         poster: PropTypes.string.isRequired\r\n//     }\r\n//     render() {\r\n//         return(\r\n//             <img src={this.props.poster} alt=\"Movie Poster\"/>\r\n//         );\r\n//     }\r\n// }\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genres}) {\r\n    return (\r\n        <span className=\"Movie__Genres\">{genres} </span>\r\n    )\r\n}\r\n\r\n// function MovieSynopsis({synopsis}) {\r\n//     return (\r\n//         <span className=\"Movie__Synopsis\">{synopsis}</span>\r\n//     )\r\n// }\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n// const movieTitles = [\n//   \"Whispering of Heart\",\n//   \"Little Forest\",\n//   \"Water Boys\",\n//   \"Call Me by Your Name\"\n// ]\n\n// const movieImages = [\n//   \"https://i.pinimg.com/originals/e4/18/20/e4182039535c55d272591c3990f64817.jpg\",\n//   \"https://t1.daumcdn.net/movie/3f9aae261c6ad6662e3bc4346821e4357ddff112\",\n//   \"http://image.cine21.com/resize/IMGDB/poster/2002/0612/large/104037_Water[X230,330].jpg\",\n//   \"https://images-eu.ssl-images-amazon.com/images/I/51LP9UCvBoL.jpg\"\n// ]\n\n\n\n\n\n\nclass App extends Component {\n\n  state = {    \n  };\n\n  componentDidMount() {\n    // setTimeout(()=> {\n    //   this.setState({\n    //     movies: [\n    //       {\n    //         title: \"Whispering of Heart\",\n    //         poster: \"https://i.pinimg.com/originals/e4/18/20/e4182039535c55d272591c3990f64817.jpg\"\n    //       },\n    //       {\n    //         title: \"Little Forest\",\n    //         poster: \"https://t1.daumcdn.net/movie/3f9aae261c6ad6662e3bc4346821e4357ddff112\",\n    //       },\n    //       {\n    //         title: \"Water Boys\",\n    //         poster: \"http://image.cine21.com/resize/IMGDB/poster/2002/0612/large/104037_Water[X230,330].jpg\"\n    //       },\n    //       {\n    //         title: \"Call Me by Your Name\",\n    //         poster: \"https://images-eu.ssl-images-amazon.com/images/I/51LP9UCvBoL.jpg\"\n    //       },\n    //       {\n    //         title:\"CaptainMarvel\",\n    //         poster: \"https://pre00.deviantart.net/7bc4/th/pre/i/2018/262/c/3/captain_marvel_movie_poster_by_arkhamnatic-dcn95yg.png\"\n    //       }\n        \n    //     ]\n    //   })\n    // }, 5000)\n    this._getMovies();\n    \n  }\n\n  _RenderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie\n      title={movie.title_english}\n      poster={movie.medium_cover_image}\n      key={movie.id}\n      genres={movie.genres}\n      synopsis={movie.synopsis}/>\n    })// 다음과 같음 ==<Movie props/> <Movie props/>\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\n    .then(incognito => incognito.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    const {movies} = this.state;\n    return (\n      <div className={movies? \"App\": \"App-loading\"}>\n      \n        {/* <Movie title={movieTitles[0]} poster={movieImages[0]}/>\n        <Movie title={movieTitles[1]} poster={movieImages[1]}/>\n        <Movie title={movieTitles[2]} poster={movieImages[2]}/>\n        <Movie title={movieTitles[3]} poster={movieImages[3]}/> */}\n        \n        {movies ? this._RenderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}